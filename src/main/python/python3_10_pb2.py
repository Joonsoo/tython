# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: python3_10.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n\x10python3_10.proto\x12\x17\x63om.giyeok.tython.proto\"\x88\x02\n\x0b\x41\x62stractMod\x12\x31\n\x06module\x18\x01 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.ModuleH\x00\x12;\n\x0binteractive\x18\x02 \x01(\x0b\x32$.com.giyeok.tython.proto.InteractiveH\x00\x12\x39\n\nexpression\x18\x03 \x01(\x0b\x32#.com.giyeok.tython.proto.ExpressionH\x00\x12>\n\rfunction_type\x18\x04 \x01(\x0b\x32%.com.giyeok.tython.proto.FunctionTypeH\x00\x42\x0e\n\x0c\x61\x62stract_mod\"\x80\x01\n\x06Module\x12\x33\n\x04\x62ody\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x41\n\x0ctype_ignores\x18\x02 \x03(\x0b\x32+.com.giyeok.tython.proto.AbstractTypeIgnore\"B\n\x0bInteractive\x12\x33\n\x04\x62ody\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\"A\n\nExpression\x12\x33\n\x04\x62ody\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\"\x7f\n\x0c\x46unctionType\x12\x37\n\x08\x61rgtypes\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x36\n\x07returns\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\"\xf6\n\n\x0c\x41\x62stractStmt\x12<\n\x0c\x66unction_def\x18\x01 \x01(\x0b\x32$.com.giyeok.tython.proto.FunctionDefH\x00\x12G\n\x12\x61sync_function_def\x18\x02 \x01(\x0b\x32).com.giyeok.tython.proto.AsyncFunctionDefH\x00\x12\x36\n\tclass_def\x18\x03 \x01(\x0b\x32!.com.giyeok.tython.proto.ClassDefH\x00\x12\x31\n\x06return\x18\x04 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.ReturnH\x00\x12\x31\n\x06\x64\x65lete\x18\x05 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.DeleteH\x00\x12\x31\n\x06\x61ssign\x18\x06 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.AssignH\x00\x12\x38\n\naug_assign\x18\x07 \x01(\x0b\x32\".com.giyeok.tython.proto.AugAssignH\x00\x12\x38\n\nann_assign\x18\x08 \x01(\x0b\x32\".com.giyeok.tython.proto.AnnAssignH\x00\x12+\n\x03\x66or\x18\t \x01(\x0b\x32\x1c.com.giyeok.tython.proto.ForH\x00\x12\x36\n\tasync_for\x18\n \x01(\x0b\x32!.com.giyeok.tython.proto.AsyncForH\x00\x12/\n\x05while\x18\x0b \x01(\x0b\x32\x1e.com.giyeok.tython.proto.WhileH\x00\x12)\n\x02if\x18\x0c \x01(\x0b\x32\x1b.com.giyeok.tython.proto.IfH\x00\x12-\n\x04with\x18\r \x01(\x0b\x32\x1d.com.giyeok.tython.proto.WithH\x00\x12\x38\n\nasync_with\x18\x0e \x01(\x0b\x32\".com.giyeok.tython.proto.AsyncWithH\x00\x12/\n\x05match\x18\x0f \x01(\x0b\x32\x1e.com.giyeok.tython.proto.MatchH\x00\x12/\n\x05raise\x18\x10 \x01(\x0b\x32\x1e.com.giyeok.tython.proto.RaiseH\x00\x12+\n\x03try\x18\x11 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.TryH\x00\x12\x31\n\x06\x61ssert\x18\x12 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.AssertH\x00\x12\x31\n\x06import\x18\x13 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.ImportH\x00\x12:\n\x0bimport_from\x18\x14 \x01(\x0b\x32#.com.giyeok.tython.proto.ImportFromH\x00\x12\x31\n\x06global\x18\x15 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.GlobalH\x00\x12\x35\n\x08nonlocal\x18\x16 \x01(\x0b\x32!.com.giyeok.tython.proto.NonlocalH\x00\x12-\n\x04\x65xpr\x18\x17 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.ExprH\x00\x12-\n\x04pass\x18\x18 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.PassH\x00\x12/\n\x05\x62reak\x18\x19 \x01(\x0b\x32\x1e.com.giyeok.tython.proto.BreakH\x00\x12\x35\n\x08\x63ontinue\x18\x1a \x01(\x0b\x32!.com.giyeok.tython.proto.ContinueH\x00\x42\x0f\n\rabstract_stmt\"\xb2\x03\n\x0b\x46unctionDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x30\n\x04\x61rgs\x18\x02 \x01(\x0b\x32\".com.giyeok.tython.proto.Arguments\x12\x33\n\x04\x62ody\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12=\n\x0e\x64\x65\x63orator_list\x18\x04 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12;\n\x07returns\x18\x05 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x19\n\x0ctype_comment\x18\x06 \x01(\tH\x01\x88\x01\x01\x12\x0e\n\x06lineno\x18\x07 \x01(\x05\x12\x12\n\ncol_offset\x18\x08 \x01(\x05\x12\x17\n\nend_lineno\x18\t \x01(\x05H\x02\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\n \x01(\x05H\x03\x88\x01\x01\x42\n\n\x08_returnsB\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xb7\x03\n\x10\x41syncFunctionDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x30\n\x04\x61rgs\x18\x02 \x01(\x0b\x32\".com.giyeok.tython.proto.Arguments\x12\x33\n\x04\x62ody\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12=\n\x0e\x64\x65\x63orator_list\x18\x04 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12;\n\x07returns\x18\x05 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x19\n\x0ctype_comment\x18\x06 \x01(\tH\x01\x88\x01\x01\x12\x0e\n\x06lineno\x18\x07 \x01(\x05\x12\x12\n\ncol_offset\x18\x08 \x01(\x05\x12\x17\n\nend_lineno\x18\t \x01(\x05H\x02\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\n \x01(\x05H\x03\x88\x01\x01\x42\n\n\x08_returnsB\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf2\x02\n\x08\x43lassDef\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x34\n\x05\x62\x61ses\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x32\n\x08keywords\x18\x03 \x03(\x0b\x32 .com.giyeok.tython.proto.Keyword\x12\x33\n\x04\x62ody\x18\x04 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12=\n\x0e\x64\x65\x63orator_list\x18\x05 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x06 \x01(\x05\x12\x12\n\ncol_offset\x18\x07 \x01(\x05\x12\x17\n\nend_lineno\x18\x08 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\t \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xc9\x01\n\x06Return\x12\x39\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x02\x88\x01\x01\x42\x08\n\x06_valueB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xbc\x01\n\x06\x44\x65lete\x12\x36\n\x07targets\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x9e\x02\n\x06\x41ssign\x12\x36\n\x07targets\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x34\n\x05value\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x19\n\x0ctype_comment\x18\x03 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x02\x88\x01\x01\x42\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xab\x02\n\tAugAssign\x12\x35\n\x06target\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x35\n\x02op\x18\x02 \x01(\x0b\x32).com.giyeok.tython.proto.AbstractOperator\x12\x34\n\x05value\x18\x03 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xce\x02\n\tAnnAssign\x12\x35\n\x06target\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x39\n\nannotation\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x39\n\x05value\x18\x03 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x0e\n\x06simple\x18\x04 \x01(\x05\x12\x0e\n\x06lineno\x18\x05 \x01(\x05\x12\x12\n\ncol_offset\x18\x06 \x01(\x05\x12\x17\n\nend_lineno\x18\x07 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x08 \x01(\x05H\x02\x88\x01\x01\x42\x08\n\x06_valueB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x85\x03\n\x03\x46or\x12\x35\n\x06target\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04iter\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04\x62ody\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x35\n\x06orelse\x18\x04 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x19\n\x0ctype_comment\x18\x05 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x06 \x01(\x05\x12\x12\n\ncol_offset\x18\x07 \x01(\x05\x12\x17\n\nend_lineno\x18\x08 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\t \x01(\x05H\x02\x88\x01\x01\x42\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x8a\x03\n\x08\x41syncFor\x12\x35\n\x06target\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04iter\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04\x62ody\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x35\n\x06orelse\x18\x04 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x19\n\x0ctype_comment\x18\x05 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x06 \x01(\x05\x12\x12\n\ncol_offset\x18\x07 \x01(\x05\x12\x17\n\nend_lineno\x18\x08 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\t \x01(\x05H\x02\x88\x01\x01\x42\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xa4\x02\n\x05While\x12\x33\n\x04test\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04\x62ody\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x35\n\x06orelse\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xa1\x02\n\x02If\x12\x33\n\x04test\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04\x62ody\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x35\n\x06orelse\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x95\x02\n\x04With\x12\x30\n\x05items\x18\x01 \x03(\x0b\x32!.com.giyeok.tython.proto.Withitem\x12\x33\n\x04\x62ody\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x19\n\x0ctype_comment\x18\x03 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x02\x88\x01\x01\x42\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x9a\x02\n\tAsyncWith\x12\x30\n\x05items\x18\x01 \x03(\x0b\x32!.com.giyeok.tython.proto.Withitem\x12\x33\n\x04\x62ody\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x19\n\x0ctype_comment\x18\x03 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x02\x88\x01\x01\x42\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xee\x01\n\x05Match\x12\x36\n\x07subject\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x31\n\x05\x63\x61ses\x18\x02 \x03(\x0b\x32\".com.giyeok.tython.proto.MatchCase\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x89\x02\n\x05Raise\x12\x37\n\x03\x65xc\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x39\n\x05\x63\x61use\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x01\x88\x01\x01\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x02\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x03\x88\x01\x01\x42\x06\n\x04_excB\x08\n\x06_causeB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xe9\x02\n\x03Try\x12\x33\n\x04\x62ody\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12@\n\x08handlers\x18\x02 \x03(\x0b\x32..com.giyeok.tython.proto.AbstractExcepthandler\x12\x35\n\x06orelse\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x38\n\tfinalbody\x18\x04 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x0e\n\x06lineno\x18\x05 \x01(\x05\x12\x12\n\ncol_offset\x18\x06 \x01(\x05\x12\x17\n\nend_lineno\x18\x07 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x08 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xfa\x01\n\x06\x41ssert\x12\x33\n\x04test\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x37\n\x03msg\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x02\x88\x01\x01\x42\x06\n\x04_msgB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xb3\x01\n\x06Import\x12-\n\x05names\x18\x01 \x03(\x0b\x32\x1e.com.giyeok.tython.proto.Alias\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf5\x01\n\nImportFrom\x12\x13\n\x06module\x18\x01 \x01(\tH\x00\x88\x01\x01\x12-\n\x05names\x18\x02 \x03(\x0b\x32\x1e.com.giyeok.tython.proto.Alias\x12\x12\n\x05level\x18\x03 \x01(\x05H\x01\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x02\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x03\x88\x01\x01\x42\t\n\x07_moduleB\x08\n\x06_levelB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x93\x01\n\x06Global\x12\r\n\x05names\x18\x01 \x03(\t\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x95\x01\n\x08Nonlocal\x12\r\n\x05names\x18\x01 \x03(\t\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xb8\x01\n\x04\x45xpr\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x82\x01\n\x04Pass\x12\x0e\n\x06lineno\x18\x01 \x01(\x05\x12\x12\n\ncol_offset\x18\x02 \x01(\x05\x12\x17\n\nend_lineno\x18\x03 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x04 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x83\x01\n\x05\x42reak\x12\x0e\n\x06lineno\x18\x01 \x01(\x05\x12\x12\n\ncol_offset\x18\x02 \x01(\x05\x12\x17\n\nend_lineno\x18\x03 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x04 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x86\x01\n\x08\x43ontinue\x12\x0e\n\x06lineno\x18\x01 \x01(\x05\x12\x12\n\ncol_offset\x18\x02 \x01(\x05\x12\x17\n\nend_lineno\x18\x03 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x04 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xca\x0b\n\x0c\x41\x62stractExpr\x12\x32\n\x07\x62ool_op\x18\x01 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.BoolOpH\x00\x12\x38\n\nnamed_expr\x18\x02 \x01(\x0b\x32\".com.giyeok.tython.proto.NamedExprH\x00\x12\x30\n\x06\x62in_op\x18\x03 \x01(\x0b\x32\x1e.com.giyeok.tython.proto.BinOpH\x00\x12\x34\n\x08unary_op\x18\x04 \x01(\x0b\x32 .com.giyeok.tython.proto.UnaryOpH\x00\x12\x31\n\x06lambda\x18\x05 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.LambdaH\x00\x12\x30\n\x06if_exp\x18\x06 \x01(\x0b\x32\x1e.com.giyeok.tython.proto.IfExpH\x00\x12-\n\x04\x64ict\x18\x07 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.DictH\x00\x12\x34\n\x08set_expr\x18\x08 \x01(\x0b\x32 .com.giyeok.tython.proto.SetExprH\x00\x12\x36\n\tlist_comp\x18\t \x01(\x0b\x32!.com.giyeok.tython.proto.ListCompH\x00\x12\x34\n\x08set_comp\x18\n \x01(\x0b\x32 .com.giyeok.tython.proto.SetCompH\x00\x12\x36\n\tdict_comp\x18\x0b \x01(\x0b\x32!.com.giyeok.tython.proto.DictCompH\x00\x12>\n\rgenerator_exp\x18\x0c \x01(\x0b\x32%.com.giyeok.tython.proto.GeneratorExpH\x00\x12/\n\x05\x61wait\x18\r \x01(\x0b\x32\x1e.com.giyeok.tython.proto.AwaitH\x00\x12/\n\x05yield\x18\x0e \x01(\x0b\x32\x1e.com.giyeok.tython.proto.YieldH\x00\x12\x38\n\nyield_from\x18\x0f \x01(\x0b\x32\".com.giyeok.tython.proto.YieldFromH\x00\x12\x33\n\x07\x63ompare\x18\x10 \x01(\x0b\x32 .com.giyeok.tython.proto.CompareH\x00\x12-\n\x04\x63\x61ll\x18\x11 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.CallH\x00\x12\x42\n\x0f\x66ormatted_value\x18\x12 \x01(\x0b\x32\'.com.giyeok.tython.proto.FormattedValueH\x00\x12\x38\n\njoined_str\x18\x13 \x01(\x0b\x32\".com.giyeok.tython.proto.JoinedStrH\x00\x12\x35\n\x08\x63onstant\x18\x14 \x01(\x0b\x32!.com.giyeok.tython.proto.ConstantH\x00\x12\x37\n\tattribute\x18\x15 \x01(\x0b\x32\".com.giyeok.tython.proto.AttributeH\x00\x12\x37\n\tsubscript\x18\x16 \x01(\x0b\x32\".com.giyeok.tython.proto.SubscriptH\x00\x12\x33\n\x07starred\x18\x17 \x01(\x0b\x32 .com.giyeok.tython.proto.StarredH\x00\x12-\n\x04name\x18\x18 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.NameH\x00\x12\x36\n\tlist_expr\x18\x19 \x01(\x0b\x32!.com.giyeok.tython.proto.ListExprH\x00\x12/\n\x05tuple\x18\x1a \x01(\x0b\x32\x1e.com.giyeok.tython.proto.TupleH\x00\x12/\n\x05slice\x18\x1b \x01(\x0b\x32\x1e.com.giyeok.tython.proto.SliceH\x00\x42\x0f\n\rabstract_expr\"\xf0\x01\n\x06\x42oolOp\x12\x33\n\x02op\x18\x01 \x01(\x0b\x32\'.com.giyeok.tython.proto.AbstractBoolop\x12\x35\n\x06values\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf4\x01\n\tNamedExpr\x12\x35\n\x06target\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x34\n\x05value\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xa5\x02\n\x05\x42inOp\x12\x33\n\x04left\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x35\n\x02op\x18\x02 \x01(\x0b\x32).com.giyeok.tython.proto.AbstractOperator\x12\x34\n\x05right\x18\x03 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf3\x01\n\x07UnaryOp\x12\x34\n\x02op\x18\x01 \x01(\x0b\x32(.com.giyeok.tython.proto.AbstractUnaryop\x12\x36\n\x07operand\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xeb\x01\n\x06Lambda\x12\x30\n\x04\x61rgs\x18\x01 \x01(\x0b\x32\".com.giyeok.tython.proto.Arguments\x12\x33\n\x04\x62ody\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xa4\x02\n\x05IfExp\x12\x33\n\x04test\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04\x62ody\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x35\n\x06orelse\x18\x03 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xee\x01\n\x04\x44ict\x12\x33\n\x04keys\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x35\n\x06values\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xba\x01\n\x07SetExpr\x12\x33\n\x04\x65lts\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf6\x01\n\x08ListComp\x12\x32\n\x03\x65lt\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12:\n\ngenerators\x18\x02 \x03(\x0b\x32&.com.giyeok.tython.proto.Comprehension\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf5\x01\n\x07SetComp\x12\x32\n\x03\x65lt\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12:\n\ngenerators\x18\x02 \x03(\x0b\x32&.com.giyeok.tython.proto.Comprehension\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xac\x02\n\x08\x44ictComp\x12\x32\n\x03key\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x34\n\x05value\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12:\n\ngenerators\x18\x03 \x03(\x0b\x32&.com.giyeok.tython.proto.Comprehension\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xfa\x01\n\x0cGeneratorExp\x12\x32\n\x03\x65lt\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12:\n\ngenerators\x18\x02 \x03(\x0b\x32&.com.giyeok.tython.proto.Comprehension\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xb9\x01\n\x05\x41wait\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xc8\x01\n\x05Yield\x12\x39\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x02\x88\x01\x01\x42\x08\n\x06_valueB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xbd\x01\n\tYieldFrom\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xab\x02\n\x07\x43ompare\x12\x33\n\x04left\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x03ops\x18\x02 \x03(\x0b\x32&.com.giyeok.tython.proto.AbstractCmpop\x12:\n\x0b\x63omparators\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xa0\x02\n\x04\x43\x61ll\x12\x33\n\x04\x66unc\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04\x61rgs\x18\x02 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x32\n\x08keywords\x18\x03 \x03(\x0b\x32 .com.giyeok.tython.proto.Keyword\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xa7\x02\n\x0e\x46ormattedValue\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x12\n\nconversion\x18\x02 \x01(\x05\x12?\n\x0b\x66ormat_spec\x18\x03 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x02\x88\x01\x01\x42\x0e\n\x0c_format_specB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xbe\x01\n\tJoinedStr\x12\x35\n\x06values\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x17\n\nend_lineno\x18\x04 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xb1\x01\n\x08\x43onstant\x12\r\n\x05value\x18\x01 \x01(\t\x12\x11\n\x04kind\x18\x02 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x02\x88\x01\x01\x42\x07\n\x05_kindB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x86\x02\n\tAttribute\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0c\n\x04\x61ttr\x18\x02 \x01(\t\x12\x39\n\x03\x63tx\x18\x03 \x01(\x0b\x32,.com.giyeok.tython.proto.AbstractExprContext\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xae\x02\n\tSubscript\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x34\n\x05slice\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x39\n\x03\x63tx\x18\x03 \x01(\x0b\x32,.com.giyeok.tython.proto.AbstractExprContext\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf6\x01\n\x07Starred\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x39\n\x03\x63tx\x18\x02 \x01(\x0b\x32,.com.giyeok.tython.proto.AbstractExprContext\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xc9\x01\n\x04Name\x12\n\n\x02id\x18\x01 \x01(\t\x12\x39\n\x03\x63tx\x18\x02 \x01(\x0b\x32,.com.giyeok.tython.proto.AbstractExprContext\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf6\x01\n\x08ListExpr\x12\x33\n\x04\x65lts\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x39\n\x03\x63tx\x18\x02 \x01(\x0b\x32,.com.giyeok.tython.proto.AbstractExprContext\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xf3\x01\n\x05Tuple\x12\x33\n\x04\x65lts\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x39\n\x03\x63tx\x18\x02 \x01(\x0b\x32,.com.giyeok.tython.proto.AbstractExprContext\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x00\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x01\x88\x01\x01\x42\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xd0\x02\n\x05Slice\x12\x39\n\x05lower\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x39\n\x05upper\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x01\x88\x01\x01\x12\x38\n\x04step\x18\x03 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x02\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x03\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x04\x88\x01\x01\x42\x08\n\x06_lowerB\x08\n\x06_upperB\x07\n\x05_stepB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xbb\x01\n\x13\x41\x62stractExprContext\x12-\n\x04load\x18\x01 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.LoadH\x00\x12/\n\x05store\x18\x02 \x01(\x0b\x32\x1e.com.giyeok.tython.proto.StoreH\x00\x12+\n\x03\x64\x65l\x18\x03 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.DelH\x00\x42\x17\n\x15\x61\x62stract_expr_context\"\x06\n\x04Load\"\x07\n\x05Store\"\x05\n\x03\x44\x65l\"{\n\x0e\x41\x62stractBoolop\x12+\n\x03\x61nd\x18\x01 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.AndH\x00\x12)\n\x02or\x18\x02 \x01(\x0b\x32\x1b.com.giyeok.tython.proto.OrH\x00\x42\x11\n\x0f\x61\x62stract_boolop\"\x05\n\x03\x41nd\"\x04\n\x02Or\"\xa7\x05\n\x10\x41\x62stractOperator\x12+\n\x03\x61\x64\x64\x18\x01 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.AddH\x00\x12+\n\x03sub\x18\x02 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.SubH\x00\x12-\n\x04mult\x18\x03 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.MultH\x00\x12\x34\n\x08mat_mult\x18\x04 \x01(\x0b\x32 .com.giyeok.tython.proto.MatMultH\x00\x12+\n\x03\x64iv\x18\x05 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.DivH\x00\x12+\n\x03mod\x18\x06 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.ModH\x00\x12+\n\x03pow\x18\x07 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.PowH\x00\x12\x32\n\x07l_shift\x18\x08 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.LShiftH\x00\x12\x32\n\x07r_shift\x18\t \x01(\x0b\x32\x1f.com.giyeok.tython.proto.RShiftH\x00\x12\x30\n\x06\x62it_or\x18\n \x01(\x0b\x32\x1e.com.giyeok.tython.proto.BitOrH\x00\x12\x32\n\x07\x62it_xor\x18\x0b \x01(\x0b\x32\x1f.com.giyeok.tython.proto.BitXorH\x00\x12\x32\n\x07\x62it_and\x18\x0c \x01(\x0b\x32\x1f.com.giyeok.tython.proto.BitAndH\x00\x12\x36\n\tfloor_div\x18\r \x01(\x0b\x32!.com.giyeok.tython.proto.FloorDivH\x00\x42\x13\n\x11\x61\x62stract_operator\"\x05\n\x03\x41\x64\x64\"\x05\n\x03Sub\"\x06\n\x04Mult\"\t\n\x07MatMult\"\x05\n\x03\x44iv\"\x05\n\x03Mod\"\x05\n\x03Pow\"\x08\n\x06LShift\"\x08\n\x06RShift\"\x07\n\x05\x42itOr\"\x08\n\x06\x42itXor\"\x08\n\x06\x42itAnd\"\n\n\x08\x46loorDiv\"\xe5\x01\n\x0f\x41\x62stractUnaryop\x12\x31\n\x06invert\x18\x01 \x01(\x0b\x32\x1f.com.giyeok.tython.proto.InvertH\x00\x12+\n\x03not\x18\x02 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.NotH\x00\x12.\n\x05u_add\x18\x03 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.UAddH\x00\x12.\n\x05u_sub\x18\x04 \x01(\x0b\x32\x1d.com.giyeok.tython.proto.USubH\x00\x42\x12\n\x10\x61\x62stract_unaryop\"\x08\n\x06Invert\"\x05\n\x03Not\"\x06\n\x04UAdd\"\x06\n\x04USub\"\xea\x03\n\rAbstractCmpop\x12)\n\x02\x65q\x18\x01 \x01(\x0b\x32\x1b.com.giyeok.tython.proto.EqH\x00\x12\x30\n\x06not_eq\x18\x02 \x01(\x0b\x32\x1e.com.giyeok.tython.proto.NotEqH\x00\x12)\n\x02lt\x18\x03 \x01(\x0b\x32\x1b.com.giyeok.tython.proto.LtH\x00\x12,\n\x04lt_e\x18\x04 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.LtEH\x00\x12)\n\x02gt\x18\x05 \x01(\x0b\x32\x1b.com.giyeok.tython.proto.GtH\x00\x12,\n\x04gt_e\x18\x06 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.GtEH\x00\x12)\n\x02is\x18\x07 \x01(\x0b\x32\x1b.com.giyeok.tython.proto.IsH\x00\x12\x30\n\x06is_not\x18\x08 \x01(\x0b\x32\x1e.com.giyeok.tython.proto.IsNotH\x00\x12)\n\x02in\x18\t \x01(\x0b\x32\x1b.com.giyeok.tython.proto.InH\x00\x12\x30\n\x06not_in\x18\n \x01(\x0b\x32\x1e.com.giyeok.tython.proto.NotInH\x00\x42\x10\n\x0e\x61\x62stract_cmpop\"\x04\n\x02\x45q\"\x07\n\x05NotEq\"\x04\n\x02Lt\"\x05\n\x03LtE\"\x04\n\x02Gt\"\x05\n\x03GtE\"\x04\n\x02Is\"\x07\n\x05IsNot\"\x04\n\x02In\"\x07\n\x05NotIn\"\xc1\x01\n\rComprehension\x12\x35\n\x06target\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x33\n\x04iter\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x32\n\x03ifs\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x10\n\x08is_async\x18\x04 \x01(\x05\"s\n\x15\x41\x62stractExcepthandler\x12@\n\x0e\x65xcept_handler\x18\x01 \x01(\x0b\x32&.com.giyeok.tython.proto.ExceptHandlerH\x00\x42\x18\n\x16\x61\x62stract_excepthandler\"\x9f\x02\n\rExceptHandler\x12\x38\n\x04type\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x11\n\x04name\x18\x02 \x01(\tH\x01\x88\x01\x01\x12\x33\n\x04\x62ody\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmt\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x02\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x03\x88\x01\x01\x42\x07\n\x05_typeB\x07\n\x05_nameB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x8b\x03\n\tArguments\x12\x31\n\x0bposonlyargs\x18\x01 \x03(\x0b\x32\x1c.com.giyeok.tython.proto.Arg\x12*\n\x04\x61rgs\x18\x02 \x03(\x0b\x32\x1c.com.giyeok.tython.proto.Arg\x12\x31\n\x06vararg\x18\x03 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.ArgH\x00\x88\x01\x01\x12\x30\n\nkwonlyargs\x18\x04 \x03(\x0b\x32\x1c.com.giyeok.tython.proto.Arg\x12:\n\x0bkw_defaults\x18\x05 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x30\n\x05kwarg\x18\x06 \x01(\x0b\x32\x1c.com.giyeok.tython.proto.ArgH\x01\x88\x01\x01\x12\x37\n\x08\x64\x65\x66\x61ults\x18\x07 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExprB\t\n\x07_varargB\x08\n\x06_kwarg\"\x89\x02\n\x03\x41rg\x12\x0b\n\x03\x61rg\x18\x01 \x01(\t\x12>\n\nannotation\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x19\n\x0ctype_comment\x18\x03 \x01(\tH\x01\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x17\n\nend_lineno\x18\x06 \x01(\x05H\x02\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05H\x03\x88\x01\x01\x42\r\n\x0b_annotationB\x0f\n\r_type_commentB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xd5\x01\n\x07Keyword\x12\x10\n\x03\x61rg\x18\x01 \x01(\tH\x00\x88\x01\x01\x12\x34\n\x05value\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x02\x88\x01\x01\x42\x06\n\x04_argB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\xb1\x01\n\x05\x41lias\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x13\n\x06\x61sname\x18\x02 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x17\n\nend_lineno\x18\x05 \x01(\x05H\x01\x88\x01\x01\x12\x1b\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05H\x02\x88\x01\x01\x42\t\n\x07_asnameB\r\n\x0b_end_linenoB\x11\n\x0f_end_col_offset\"\x9c\x01\n\x08Withitem\x12;\n\x0c\x63ontext_expr\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x41\n\roptional_vars\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x42\x10\n\x0e_optional_vars\"\xc0\x01\n\tMatchCase\x12\x39\n\x07pattern\x18\x01 \x01(\x0b\x32(.com.giyeok.tython.proto.AbstractPattern\x12\x39\n\x05guard\x18\x02 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExprH\x00\x88\x01\x01\x12\x33\n\x04\x62ody\x18\x03 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractStmtB\x08\n\x06_guard\"\x89\x04\n\x0f\x41\x62stractPattern\x12:\n\x0bmatch_value\x18\x01 \x01(\x0b\x32#.com.giyeok.tython.proto.MatchValueH\x00\x12\x42\n\x0fmatch_singleton\x18\x02 \x01(\x0b\x32\'.com.giyeok.tython.proto.MatchSingletonH\x00\x12@\n\x0ematch_sequence\x18\x03 \x01(\x0b\x32&.com.giyeok.tython.proto.MatchSequenceH\x00\x12>\n\rmatch_mapping\x18\x04 \x01(\x0b\x32%.com.giyeok.tython.proto.MatchMappingH\x00\x12:\n\x0bmatch_class\x18\x05 \x01(\x0b\x32#.com.giyeok.tython.proto.MatchClassH\x00\x12\x38\n\nmatch_star\x18\x06 \x01(\x0b\x32\".com.giyeok.tython.proto.MatchStarH\x00\x12\x34\n\x08match_as\x18\x07 \x01(\x0b\x32 .com.giyeok.tython.proto.MatchAsH\x00\x12\x34\n\x08match_or\x18\x08 \x01(\x0b\x32 .com.giyeok.tython.proto.MatchOrH\x00\x42\x12\n\x10\x61\x62stract_pattern\"\x92\x01\n\nMatchValue\x12\x34\n\x05value\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x12\n\nend_lineno\x18\x04 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05\"o\n\x0eMatchSingleton\x12\r\n\x05value\x18\x01 \x01(\t\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x12\n\nend_lineno\x18\x04 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05\"\x9b\x01\n\rMatchSequence\x12:\n\x08patterns\x18\x01 \x03(\x0b\x32(.com.giyeok.tython.proto.AbstractPattern\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x12\n\nend_lineno\x18\x04 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05\"\xeb\x01\n\x0cMatchMapping\x12\x33\n\x04keys\x18\x01 \x03(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12:\n\x08patterns\x18\x02 \x03(\x0b\x32(.com.giyeok.tython.proto.AbstractPattern\x12\x11\n\x04rest\x18\x03 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x04 \x01(\x05\x12\x12\n\ncol_offset\x18\x05 \x01(\x05\x12\x12\n\nend_lineno\x18\x06 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x07 \x01(\x05\x42\x07\n\x05_rest\"\x9f\x02\n\nMatchClass\x12\x32\n\x03\x63ls\x18\x01 \x01(\x0b\x32%.com.giyeok.tython.proto.AbstractExpr\x12:\n\x08patterns\x18\x02 \x03(\x0b\x32(.com.giyeok.tython.proto.AbstractPattern\x12\x11\n\tkwd_attrs\x18\x03 \x03(\t\x12>\n\x0ckwd_patterns\x18\x04 \x03(\x0b\x32(.com.giyeok.tython.proto.AbstractPattern\x12\x0e\n\x06lineno\x18\x05 \x01(\x05\x12\x12\n\ncol_offset\x18\x06 \x01(\x05\x12\x12\n\nend_lineno\x18\x07 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x08 \x01(\x05\"w\n\tMatchStar\x12\x11\n\x04name\x18\x01 \x01(\tH\x00\x88\x01\x01\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x12\n\nend_lineno\x18\x04 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05\x42\x07\n\x05_name\"\xc1\x01\n\x07MatchAs\x12>\n\x07pattern\x18\x01 \x01(\x0b\x32(.com.giyeok.tython.proto.AbstractPatternH\x00\x88\x01\x01\x12\x11\n\x04name\x18\x02 \x01(\tH\x01\x88\x01\x01\x12\x0e\n\x06lineno\x18\x03 \x01(\x05\x12\x12\n\ncol_offset\x18\x04 \x01(\x05\x12\x12\n\nend_lineno\x18\x05 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x06 \x01(\x05\x42\n\n\x08_patternB\x07\n\x05_name\"\x95\x01\n\x07MatchOr\x12:\n\x08patterns\x18\x01 \x03(\x0b\x32(.com.giyeok.tython.proto.AbstractPattern\x12\x0e\n\x06lineno\x18\x02 \x01(\x05\x12\x12\n\ncol_offset\x18\x03 \x01(\x05\x12\x12\n\nend_lineno\x18\x04 \x01(\x05\x12\x16\n\x0e\x65nd_col_offset\x18\x05 \x01(\x05\"h\n\x12\x41\x62stractTypeIgnore\x12:\n\x0btype_ignore\x18\x01 \x01(\x0b\x32#.com.giyeok.tython.proto.TypeIgnoreH\x00\x42\x16\n\x14\x61\x62stract_type_ignore\")\n\nTypeIgnore\x12\x0e\n\x06lineno\x18\x01 \x01(\x05\x12\x0b\n\x03tag\x18\x02 \x01(\tB\x02P\x01\x62\x06proto3')



_ABSTRACTMOD = DESCRIPTOR.message_types_by_name['AbstractMod']
_MODULE = DESCRIPTOR.message_types_by_name['Module']
_INTERACTIVE = DESCRIPTOR.message_types_by_name['Interactive']
_EXPRESSION = DESCRIPTOR.message_types_by_name['Expression']
_FUNCTIONTYPE = DESCRIPTOR.message_types_by_name['FunctionType']
_ABSTRACTSTMT = DESCRIPTOR.message_types_by_name['AbstractStmt']
_FUNCTIONDEF = DESCRIPTOR.message_types_by_name['FunctionDef']
_ASYNCFUNCTIONDEF = DESCRIPTOR.message_types_by_name['AsyncFunctionDef']
_CLASSDEF = DESCRIPTOR.message_types_by_name['ClassDef']
_RETURN = DESCRIPTOR.message_types_by_name['Return']
_DELETE = DESCRIPTOR.message_types_by_name['Delete']
_ASSIGN = DESCRIPTOR.message_types_by_name['Assign']
_AUGASSIGN = DESCRIPTOR.message_types_by_name['AugAssign']
_ANNASSIGN = DESCRIPTOR.message_types_by_name['AnnAssign']
_FOR = DESCRIPTOR.message_types_by_name['For']
_ASYNCFOR = DESCRIPTOR.message_types_by_name['AsyncFor']
_WHILE = DESCRIPTOR.message_types_by_name['While']
_IF = DESCRIPTOR.message_types_by_name['If']
_WITH = DESCRIPTOR.message_types_by_name['With']
_ASYNCWITH = DESCRIPTOR.message_types_by_name['AsyncWith']
_MATCH = DESCRIPTOR.message_types_by_name['Match']
_RAISE = DESCRIPTOR.message_types_by_name['Raise']
_TRY = DESCRIPTOR.message_types_by_name['Try']
_ASSERT = DESCRIPTOR.message_types_by_name['Assert']
_IMPORT = DESCRIPTOR.message_types_by_name['Import']
_IMPORTFROM = DESCRIPTOR.message_types_by_name['ImportFrom']
_GLOBAL = DESCRIPTOR.message_types_by_name['Global']
_NONLOCAL = DESCRIPTOR.message_types_by_name['Nonlocal']
_EXPR = DESCRIPTOR.message_types_by_name['Expr']
_PASS = DESCRIPTOR.message_types_by_name['Pass']
_BREAK = DESCRIPTOR.message_types_by_name['Break']
_CONTINUE = DESCRIPTOR.message_types_by_name['Continue']
_ABSTRACTEXPR = DESCRIPTOR.message_types_by_name['AbstractExpr']
_BOOLOP = DESCRIPTOR.message_types_by_name['BoolOp']
_NAMEDEXPR = DESCRIPTOR.message_types_by_name['NamedExpr']
_BINOP = DESCRIPTOR.message_types_by_name['BinOp']
_UNARYOP = DESCRIPTOR.message_types_by_name['UnaryOp']
_LAMBDA = DESCRIPTOR.message_types_by_name['Lambda']
_IFEXP = DESCRIPTOR.message_types_by_name['IfExp']
_DICT = DESCRIPTOR.message_types_by_name['Dict']
_SETEXPR = DESCRIPTOR.message_types_by_name['SetExpr']
_LISTCOMP = DESCRIPTOR.message_types_by_name['ListComp']
_SETCOMP = DESCRIPTOR.message_types_by_name['SetComp']
_DICTCOMP = DESCRIPTOR.message_types_by_name['DictComp']
_GENERATOREXP = DESCRIPTOR.message_types_by_name['GeneratorExp']
_AWAIT = DESCRIPTOR.message_types_by_name['Await']
_YIELD = DESCRIPTOR.message_types_by_name['Yield']
_YIELDFROM = DESCRIPTOR.message_types_by_name['YieldFrom']
_COMPARE = DESCRIPTOR.message_types_by_name['Compare']
_CALL = DESCRIPTOR.message_types_by_name['Call']
_FORMATTEDVALUE = DESCRIPTOR.message_types_by_name['FormattedValue']
_JOINEDSTR = DESCRIPTOR.message_types_by_name['JoinedStr']
_CONSTANT = DESCRIPTOR.message_types_by_name['Constant']
_ATTRIBUTE = DESCRIPTOR.message_types_by_name['Attribute']
_SUBSCRIPT = DESCRIPTOR.message_types_by_name['Subscript']
_STARRED = DESCRIPTOR.message_types_by_name['Starred']
_NAME = DESCRIPTOR.message_types_by_name['Name']
_LISTEXPR = DESCRIPTOR.message_types_by_name['ListExpr']
_TUPLE = DESCRIPTOR.message_types_by_name['Tuple']
_SLICE = DESCRIPTOR.message_types_by_name['Slice']
_ABSTRACTEXPRCONTEXT = DESCRIPTOR.message_types_by_name['AbstractExprContext']
_LOAD = DESCRIPTOR.message_types_by_name['Load']
_STORE = DESCRIPTOR.message_types_by_name['Store']
_DEL = DESCRIPTOR.message_types_by_name['Del']
_ABSTRACTBOOLOP = DESCRIPTOR.message_types_by_name['AbstractBoolop']
_AND = DESCRIPTOR.message_types_by_name['And']
_OR = DESCRIPTOR.message_types_by_name['Or']
_ABSTRACTOPERATOR = DESCRIPTOR.message_types_by_name['AbstractOperator']
_ADD = DESCRIPTOR.message_types_by_name['Add']
_SUB = DESCRIPTOR.message_types_by_name['Sub']
_MULT = DESCRIPTOR.message_types_by_name['Mult']
_MATMULT = DESCRIPTOR.message_types_by_name['MatMult']
_DIV = DESCRIPTOR.message_types_by_name['Div']
_MOD = DESCRIPTOR.message_types_by_name['Mod']
_POW = DESCRIPTOR.message_types_by_name['Pow']
_LSHIFT = DESCRIPTOR.message_types_by_name['LShift']
_RSHIFT = DESCRIPTOR.message_types_by_name['RShift']
_BITOR = DESCRIPTOR.message_types_by_name['BitOr']
_BITXOR = DESCRIPTOR.message_types_by_name['BitXor']
_BITAND = DESCRIPTOR.message_types_by_name['BitAnd']
_FLOORDIV = DESCRIPTOR.message_types_by_name['FloorDiv']
_ABSTRACTUNARYOP = DESCRIPTOR.message_types_by_name['AbstractUnaryop']
_INVERT = DESCRIPTOR.message_types_by_name['Invert']
_NOT = DESCRIPTOR.message_types_by_name['Not']
_UADD = DESCRIPTOR.message_types_by_name['UAdd']
_USUB = DESCRIPTOR.message_types_by_name['USub']
_ABSTRACTCMPOP = DESCRIPTOR.message_types_by_name['AbstractCmpop']
_EQ = DESCRIPTOR.message_types_by_name['Eq']
_NOTEQ = DESCRIPTOR.message_types_by_name['NotEq']
_LT = DESCRIPTOR.message_types_by_name['Lt']
_LTE = DESCRIPTOR.message_types_by_name['LtE']
_GT = DESCRIPTOR.message_types_by_name['Gt']
_GTE = DESCRIPTOR.message_types_by_name['GtE']
_IS = DESCRIPTOR.message_types_by_name['Is']
_ISNOT = DESCRIPTOR.message_types_by_name['IsNot']
_IN = DESCRIPTOR.message_types_by_name['In']
_NOTIN = DESCRIPTOR.message_types_by_name['NotIn']
_COMPREHENSION = DESCRIPTOR.message_types_by_name['Comprehension']
_ABSTRACTEXCEPTHANDLER = DESCRIPTOR.message_types_by_name['AbstractExcepthandler']
_EXCEPTHANDLER = DESCRIPTOR.message_types_by_name['ExceptHandler']
_ARGUMENTS = DESCRIPTOR.message_types_by_name['Arguments']
_ARG = DESCRIPTOR.message_types_by_name['Arg']
_KEYWORD = DESCRIPTOR.message_types_by_name['Keyword']
_ALIAS = DESCRIPTOR.message_types_by_name['Alias']
_WITHITEM = DESCRIPTOR.message_types_by_name['Withitem']
_MATCHCASE = DESCRIPTOR.message_types_by_name['MatchCase']
_ABSTRACTPATTERN = DESCRIPTOR.message_types_by_name['AbstractPattern']
_MATCHVALUE = DESCRIPTOR.message_types_by_name['MatchValue']
_MATCHSINGLETON = DESCRIPTOR.message_types_by_name['MatchSingleton']
_MATCHSEQUENCE = DESCRIPTOR.message_types_by_name['MatchSequence']
_MATCHMAPPING = DESCRIPTOR.message_types_by_name['MatchMapping']
_MATCHCLASS = DESCRIPTOR.message_types_by_name['MatchClass']
_MATCHSTAR = DESCRIPTOR.message_types_by_name['MatchStar']
_MATCHAS = DESCRIPTOR.message_types_by_name['MatchAs']
_MATCHOR = DESCRIPTOR.message_types_by_name['MatchOr']
_ABSTRACTTYPEIGNORE = DESCRIPTOR.message_types_by_name['AbstractTypeIgnore']
_TYPEIGNORE = DESCRIPTOR.message_types_by_name['TypeIgnore']
AbstractMod = _reflection.GeneratedProtocolMessageType('AbstractMod', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTMOD,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractMod)
  })
_sym_db.RegisterMessage(AbstractMod)

Module = _reflection.GeneratedProtocolMessageType('Module', (_message.Message,), {
  'DESCRIPTOR' : _MODULE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Module)
  })
_sym_db.RegisterMessage(Module)

Interactive = _reflection.GeneratedProtocolMessageType('Interactive', (_message.Message,), {
  'DESCRIPTOR' : _INTERACTIVE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Interactive)
  })
_sym_db.RegisterMessage(Interactive)

Expression = _reflection.GeneratedProtocolMessageType('Expression', (_message.Message,), {
  'DESCRIPTOR' : _EXPRESSION,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Expression)
  })
_sym_db.RegisterMessage(Expression)

FunctionType = _reflection.GeneratedProtocolMessageType('FunctionType', (_message.Message,), {
  'DESCRIPTOR' : _FUNCTIONTYPE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.FunctionType)
  })
_sym_db.RegisterMessage(FunctionType)

AbstractStmt = _reflection.GeneratedProtocolMessageType('AbstractStmt', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTSTMT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractStmt)
  })
_sym_db.RegisterMessage(AbstractStmt)

FunctionDef = _reflection.GeneratedProtocolMessageType('FunctionDef', (_message.Message,), {
  'DESCRIPTOR' : _FUNCTIONDEF,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.FunctionDef)
  })
_sym_db.RegisterMessage(FunctionDef)

AsyncFunctionDef = _reflection.GeneratedProtocolMessageType('AsyncFunctionDef', (_message.Message,), {
  'DESCRIPTOR' : _ASYNCFUNCTIONDEF,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AsyncFunctionDef)
  })
_sym_db.RegisterMessage(AsyncFunctionDef)

ClassDef = _reflection.GeneratedProtocolMessageType('ClassDef', (_message.Message,), {
  'DESCRIPTOR' : _CLASSDEF,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.ClassDef)
  })
_sym_db.RegisterMessage(ClassDef)

Return = _reflection.GeneratedProtocolMessageType('Return', (_message.Message,), {
  'DESCRIPTOR' : _RETURN,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Return)
  })
_sym_db.RegisterMessage(Return)

Delete = _reflection.GeneratedProtocolMessageType('Delete', (_message.Message,), {
  'DESCRIPTOR' : _DELETE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Delete)
  })
_sym_db.RegisterMessage(Delete)

Assign = _reflection.GeneratedProtocolMessageType('Assign', (_message.Message,), {
  'DESCRIPTOR' : _ASSIGN,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Assign)
  })
_sym_db.RegisterMessage(Assign)

AugAssign = _reflection.GeneratedProtocolMessageType('AugAssign', (_message.Message,), {
  'DESCRIPTOR' : _AUGASSIGN,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AugAssign)
  })
_sym_db.RegisterMessage(AugAssign)

AnnAssign = _reflection.GeneratedProtocolMessageType('AnnAssign', (_message.Message,), {
  'DESCRIPTOR' : _ANNASSIGN,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AnnAssign)
  })
_sym_db.RegisterMessage(AnnAssign)

For = _reflection.GeneratedProtocolMessageType('For', (_message.Message,), {
  'DESCRIPTOR' : _FOR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.For)
  })
_sym_db.RegisterMessage(For)

AsyncFor = _reflection.GeneratedProtocolMessageType('AsyncFor', (_message.Message,), {
  'DESCRIPTOR' : _ASYNCFOR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AsyncFor)
  })
_sym_db.RegisterMessage(AsyncFor)

While = _reflection.GeneratedProtocolMessageType('While', (_message.Message,), {
  'DESCRIPTOR' : _WHILE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.While)
  })
_sym_db.RegisterMessage(While)

If = _reflection.GeneratedProtocolMessageType('If', (_message.Message,), {
  'DESCRIPTOR' : _IF,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.If)
  })
_sym_db.RegisterMessage(If)

With = _reflection.GeneratedProtocolMessageType('With', (_message.Message,), {
  'DESCRIPTOR' : _WITH,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.With)
  })
_sym_db.RegisterMessage(With)

AsyncWith = _reflection.GeneratedProtocolMessageType('AsyncWith', (_message.Message,), {
  'DESCRIPTOR' : _ASYNCWITH,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AsyncWith)
  })
_sym_db.RegisterMessage(AsyncWith)

Match = _reflection.GeneratedProtocolMessageType('Match', (_message.Message,), {
  'DESCRIPTOR' : _MATCH,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Match)
  })
_sym_db.RegisterMessage(Match)

Raise = _reflection.GeneratedProtocolMessageType('Raise', (_message.Message,), {
  'DESCRIPTOR' : _RAISE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Raise)
  })
_sym_db.RegisterMessage(Raise)

Try = _reflection.GeneratedProtocolMessageType('Try', (_message.Message,), {
  'DESCRIPTOR' : _TRY,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Try)
  })
_sym_db.RegisterMessage(Try)

Assert = _reflection.GeneratedProtocolMessageType('Assert', (_message.Message,), {
  'DESCRIPTOR' : _ASSERT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Assert)
  })
_sym_db.RegisterMessage(Assert)

Import = _reflection.GeneratedProtocolMessageType('Import', (_message.Message,), {
  'DESCRIPTOR' : _IMPORT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Import)
  })
_sym_db.RegisterMessage(Import)

ImportFrom = _reflection.GeneratedProtocolMessageType('ImportFrom', (_message.Message,), {
  'DESCRIPTOR' : _IMPORTFROM,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.ImportFrom)
  })
_sym_db.RegisterMessage(ImportFrom)

Global = _reflection.GeneratedProtocolMessageType('Global', (_message.Message,), {
  'DESCRIPTOR' : _GLOBAL,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Global)
  })
_sym_db.RegisterMessage(Global)

Nonlocal = _reflection.GeneratedProtocolMessageType('Nonlocal', (_message.Message,), {
  'DESCRIPTOR' : _NONLOCAL,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Nonlocal)
  })
_sym_db.RegisterMessage(Nonlocal)

Expr = _reflection.GeneratedProtocolMessageType('Expr', (_message.Message,), {
  'DESCRIPTOR' : _EXPR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Expr)
  })
_sym_db.RegisterMessage(Expr)

Pass = _reflection.GeneratedProtocolMessageType('Pass', (_message.Message,), {
  'DESCRIPTOR' : _PASS,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Pass)
  })
_sym_db.RegisterMessage(Pass)

Break = _reflection.GeneratedProtocolMessageType('Break', (_message.Message,), {
  'DESCRIPTOR' : _BREAK,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Break)
  })
_sym_db.RegisterMessage(Break)

Continue = _reflection.GeneratedProtocolMessageType('Continue', (_message.Message,), {
  'DESCRIPTOR' : _CONTINUE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Continue)
  })
_sym_db.RegisterMessage(Continue)

AbstractExpr = _reflection.GeneratedProtocolMessageType('AbstractExpr', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTEXPR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractExpr)
  })
_sym_db.RegisterMessage(AbstractExpr)

BoolOp = _reflection.GeneratedProtocolMessageType('BoolOp', (_message.Message,), {
  'DESCRIPTOR' : _BOOLOP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.BoolOp)
  })
_sym_db.RegisterMessage(BoolOp)

NamedExpr = _reflection.GeneratedProtocolMessageType('NamedExpr', (_message.Message,), {
  'DESCRIPTOR' : _NAMEDEXPR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.NamedExpr)
  })
_sym_db.RegisterMessage(NamedExpr)

BinOp = _reflection.GeneratedProtocolMessageType('BinOp', (_message.Message,), {
  'DESCRIPTOR' : _BINOP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.BinOp)
  })
_sym_db.RegisterMessage(BinOp)

UnaryOp = _reflection.GeneratedProtocolMessageType('UnaryOp', (_message.Message,), {
  'DESCRIPTOR' : _UNARYOP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.UnaryOp)
  })
_sym_db.RegisterMessage(UnaryOp)

Lambda = _reflection.GeneratedProtocolMessageType('Lambda', (_message.Message,), {
  'DESCRIPTOR' : _LAMBDA,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Lambda)
  })
_sym_db.RegisterMessage(Lambda)

IfExp = _reflection.GeneratedProtocolMessageType('IfExp', (_message.Message,), {
  'DESCRIPTOR' : _IFEXP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.IfExp)
  })
_sym_db.RegisterMessage(IfExp)

Dict = _reflection.GeneratedProtocolMessageType('Dict', (_message.Message,), {
  'DESCRIPTOR' : _DICT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Dict)
  })
_sym_db.RegisterMessage(Dict)

SetExpr = _reflection.GeneratedProtocolMessageType('SetExpr', (_message.Message,), {
  'DESCRIPTOR' : _SETEXPR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.SetExpr)
  })
_sym_db.RegisterMessage(SetExpr)

ListComp = _reflection.GeneratedProtocolMessageType('ListComp', (_message.Message,), {
  'DESCRIPTOR' : _LISTCOMP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.ListComp)
  })
_sym_db.RegisterMessage(ListComp)

SetComp = _reflection.GeneratedProtocolMessageType('SetComp', (_message.Message,), {
  'DESCRIPTOR' : _SETCOMP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.SetComp)
  })
_sym_db.RegisterMessage(SetComp)

DictComp = _reflection.GeneratedProtocolMessageType('DictComp', (_message.Message,), {
  'DESCRIPTOR' : _DICTCOMP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.DictComp)
  })
_sym_db.RegisterMessage(DictComp)

GeneratorExp = _reflection.GeneratedProtocolMessageType('GeneratorExp', (_message.Message,), {
  'DESCRIPTOR' : _GENERATOREXP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.GeneratorExp)
  })
_sym_db.RegisterMessage(GeneratorExp)

Await = _reflection.GeneratedProtocolMessageType('Await', (_message.Message,), {
  'DESCRIPTOR' : _AWAIT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Await)
  })
_sym_db.RegisterMessage(Await)

Yield = _reflection.GeneratedProtocolMessageType('Yield', (_message.Message,), {
  'DESCRIPTOR' : _YIELD,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Yield)
  })
_sym_db.RegisterMessage(Yield)

YieldFrom = _reflection.GeneratedProtocolMessageType('YieldFrom', (_message.Message,), {
  'DESCRIPTOR' : _YIELDFROM,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.YieldFrom)
  })
_sym_db.RegisterMessage(YieldFrom)

Compare = _reflection.GeneratedProtocolMessageType('Compare', (_message.Message,), {
  'DESCRIPTOR' : _COMPARE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Compare)
  })
_sym_db.RegisterMessage(Compare)

Call = _reflection.GeneratedProtocolMessageType('Call', (_message.Message,), {
  'DESCRIPTOR' : _CALL,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Call)
  })
_sym_db.RegisterMessage(Call)

FormattedValue = _reflection.GeneratedProtocolMessageType('FormattedValue', (_message.Message,), {
  'DESCRIPTOR' : _FORMATTEDVALUE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.FormattedValue)
  })
_sym_db.RegisterMessage(FormattedValue)

JoinedStr = _reflection.GeneratedProtocolMessageType('JoinedStr', (_message.Message,), {
  'DESCRIPTOR' : _JOINEDSTR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.JoinedStr)
  })
_sym_db.RegisterMessage(JoinedStr)

Constant = _reflection.GeneratedProtocolMessageType('Constant', (_message.Message,), {
  'DESCRIPTOR' : _CONSTANT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Constant)
  })
_sym_db.RegisterMessage(Constant)

Attribute = _reflection.GeneratedProtocolMessageType('Attribute', (_message.Message,), {
  'DESCRIPTOR' : _ATTRIBUTE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Attribute)
  })
_sym_db.RegisterMessage(Attribute)

Subscript = _reflection.GeneratedProtocolMessageType('Subscript', (_message.Message,), {
  'DESCRIPTOR' : _SUBSCRIPT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Subscript)
  })
_sym_db.RegisterMessage(Subscript)

Starred = _reflection.GeneratedProtocolMessageType('Starred', (_message.Message,), {
  'DESCRIPTOR' : _STARRED,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Starred)
  })
_sym_db.RegisterMessage(Starred)

Name = _reflection.GeneratedProtocolMessageType('Name', (_message.Message,), {
  'DESCRIPTOR' : _NAME,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Name)
  })
_sym_db.RegisterMessage(Name)

ListExpr = _reflection.GeneratedProtocolMessageType('ListExpr', (_message.Message,), {
  'DESCRIPTOR' : _LISTEXPR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.ListExpr)
  })
_sym_db.RegisterMessage(ListExpr)

Tuple = _reflection.GeneratedProtocolMessageType('Tuple', (_message.Message,), {
  'DESCRIPTOR' : _TUPLE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Tuple)
  })
_sym_db.RegisterMessage(Tuple)

Slice = _reflection.GeneratedProtocolMessageType('Slice', (_message.Message,), {
  'DESCRIPTOR' : _SLICE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Slice)
  })
_sym_db.RegisterMessage(Slice)

AbstractExprContext = _reflection.GeneratedProtocolMessageType('AbstractExprContext', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTEXPRCONTEXT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractExprContext)
  })
_sym_db.RegisterMessage(AbstractExprContext)

Load = _reflection.GeneratedProtocolMessageType('Load', (_message.Message,), {
  'DESCRIPTOR' : _LOAD,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Load)
  })
_sym_db.RegisterMessage(Load)

Store = _reflection.GeneratedProtocolMessageType('Store', (_message.Message,), {
  'DESCRIPTOR' : _STORE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Store)
  })
_sym_db.RegisterMessage(Store)

Del = _reflection.GeneratedProtocolMessageType('Del', (_message.Message,), {
  'DESCRIPTOR' : _DEL,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Del)
  })
_sym_db.RegisterMessage(Del)

AbstractBoolop = _reflection.GeneratedProtocolMessageType('AbstractBoolop', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTBOOLOP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractBoolop)
  })
_sym_db.RegisterMessage(AbstractBoolop)

And = _reflection.GeneratedProtocolMessageType('And', (_message.Message,), {
  'DESCRIPTOR' : _AND,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.And)
  })
_sym_db.RegisterMessage(And)

Or = _reflection.GeneratedProtocolMessageType('Or', (_message.Message,), {
  'DESCRIPTOR' : _OR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Or)
  })
_sym_db.RegisterMessage(Or)

AbstractOperator = _reflection.GeneratedProtocolMessageType('AbstractOperator', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTOPERATOR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractOperator)
  })
_sym_db.RegisterMessage(AbstractOperator)

Add = _reflection.GeneratedProtocolMessageType('Add', (_message.Message,), {
  'DESCRIPTOR' : _ADD,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Add)
  })
_sym_db.RegisterMessage(Add)

Sub = _reflection.GeneratedProtocolMessageType('Sub', (_message.Message,), {
  'DESCRIPTOR' : _SUB,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Sub)
  })
_sym_db.RegisterMessage(Sub)

Mult = _reflection.GeneratedProtocolMessageType('Mult', (_message.Message,), {
  'DESCRIPTOR' : _MULT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Mult)
  })
_sym_db.RegisterMessage(Mult)

MatMult = _reflection.GeneratedProtocolMessageType('MatMult', (_message.Message,), {
  'DESCRIPTOR' : _MATMULT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatMult)
  })
_sym_db.RegisterMessage(MatMult)

Div = _reflection.GeneratedProtocolMessageType('Div', (_message.Message,), {
  'DESCRIPTOR' : _DIV,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Div)
  })
_sym_db.RegisterMessage(Div)

Mod = _reflection.GeneratedProtocolMessageType('Mod', (_message.Message,), {
  'DESCRIPTOR' : _MOD,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Mod)
  })
_sym_db.RegisterMessage(Mod)

Pow = _reflection.GeneratedProtocolMessageType('Pow', (_message.Message,), {
  'DESCRIPTOR' : _POW,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Pow)
  })
_sym_db.RegisterMessage(Pow)

LShift = _reflection.GeneratedProtocolMessageType('LShift', (_message.Message,), {
  'DESCRIPTOR' : _LSHIFT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.LShift)
  })
_sym_db.RegisterMessage(LShift)

RShift = _reflection.GeneratedProtocolMessageType('RShift', (_message.Message,), {
  'DESCRIPTOR' : _RSHIFT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.RShift)
  })
_sym_db.RegisterMessage(RShift)

BitOr = _reflection.GeneratedProtocolMessageType('BitOr', (_message.Message,), {
  'DESCRIPTOR' : _BITOR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.BitOr)
  })
_sym_db.RegisterMessage(BitOr)

BitXor = _reflection.GeneratedProtocolMessageType('BitXor', (_message.Message,), {
  'DESCRIPTOR' : _BITXOR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.BitXor)
  })
_sym_db.RegisterMessage(BitXor)

BitAnd = _reflection.GeneratedProtocolMessageType('BitAnd', (_message.Message,), {
  'DESCRIPTOR' : _BITAND,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.BitAnd)
  })
_sym_db.RegisterMessage(BitAnd)

FloorDiv = _reflection.GeneratedProtocolMessageType('FloorDiv', (_message.Message,), {
  'DESCRIPTOR' : _FLOORDIV,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.FloorDiv)
  })
_sym_db.RegisterMessage(FloorDiv)

AbstractUnaryop = _reflection.GeneratedProtocolMessageType('AbstractUnaryop', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTUNARYOP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractUnaryop)
  })
_sym_db.RegisterMessage(AbstractUnaryop)

Invert = _reflection.GeneratedProtocolMessageType('Invert', (_message.Message,), {
  'DESCRIPTOR' : _INVERT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Invert)
  })
_sym_db.RegisterMessage(Invert)

Not = _reflection.GeneratedProtocolMessageType('Not', (_message.Message,), {
  'DESCRIPTOR' : _NOT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Not)
  })
_sym_db.RegisterMessage(Not)

UAdd = _reflection.GeneratedProtocolMessageType('UAdd', (_message.Message,), {
  'DESCRIPTOR' : _UADD,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.UAdd)
  })
_sym_db.RegisterMessage(UAdd)

USub = _reflection.GeneratedProtocolMessageType('USub', (_message.Message,), {
  'DESCRIPTOR' : _USUB,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.USub)
  })
_sym_db.RegisterMessage(USub)

AbstractCmpop = _reflection.GeneratedProtocolMessageType('AbstractCmpop', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTCMPOP,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractCmpop)
  })
_sym_db.RegisterMessage(AbstractCmpop)

Eq = _reflection.GeneratedProtocolMessageType('Eq', (_message.Message,), {
  'DESCRIPTOR' : _EQ,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Eq)
  })
_sym_db.RegisterMessage(Eq)

NotEq = _reflection.GeneratedProtocolMessageType('NotEq', (_message.Message,), {
  'DESCRIPTOR' : _NOTEQ,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.NotEq)
  })
_sym_db.RegisterMessage(NotEq)

Lt = _reflection.GeneratedProtocolMessageType('Lt', (_message.Message,), {
  'DESCRIPTOR' : _LT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Lt)
  })
_sym_db.RegisterMessage(Lt)

LtE = _reflection.GeneratedProtocolMessageType('LtE', (_message.Message,), {
  'DESCRIPTOR' : _LTE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.LtE)
  })
_sym_db.RegisterMessage(LtE)

Gt = _reflection.GeneratedProtocolMessageType('Gt', (_message.Message,), {
  'DESCRIPTOR' : _GT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Gt)
  })
_sym_db.RegisterMessage(Gt)

GtE = _reflection.GeneratedProtocolMessageType('GtE', (_message.Message,), {
  'DESCRIPTOR' : _GTE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.GtE)
  })
_sym_db.RegisterMessage(GtE)

Is = _reflection.GeneratedProtocolMessageType('Is', (_message.Message,), {
  'DESCRIPTOR' : _IS,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Is)
  })
_sym_db.RegisterMessage(Is)

IsNot = _reflection.GeneratedProtocolMessageType('IsNot', (_message.Message,), {
  'DESCRIPTOR' : _ISNOT,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.IsNot)
  })
_sym_db.RegisterMessage(IsNot)

In = _reflection.GeneratedProtocolMessageType('In', (_message.Message,), {
  'DESCRIPTOR' : _IN,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.In)
  })
_sym_db.RegisterMessage(In)

NotIn = _reflection.GeneratedProtocolMessageType('NotIn', (_message.Message,), {
  'DESCRIPTOR' : _NOTIN,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.NotIn)
  })
_sym_db.RegisterMessage(NotIn)

Comprehension = _reflection.GeneratedProtocolMessageType('Comprehension', (_message.Message,), {
  'DESCRIPTOR' : _COMPREHENSION,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Comprehension)
  })
_sym_db.RegisterMessage(Comprehension)

AbstractExcepthandler = _reflection.GeneratedProtocolMessageType('AbstractExcepthandler', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTEXCEPTHANDLER,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractExcepthandler)
  })
_sym_db.RegisterMessage(AbstractExcepthandler)

ExceptHandler = _reflection.GeneratedProtocolMessageType('ExceptHandler', (_message.Message,), {
  'DESCRIPTOR' : _EXCEPTHANDLER,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.ExceptHandler)
  })
_sym_db.RegisterMessage(ExceptHandler)

Arguments = _reflection.GeneratedProtocolMessageType('Arguments', (_message.Message,), {
  'DESCRIPTOR' : _ARGUMENTS,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Arguments)
  })
_sym_db.RegisterMessage(Arguments)

Arg = _reflection.GeneratedProtocolMessageType('Arg', (_message.Message,), {
  'DESCRIPTOR' : _ARG,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Arg)
  })
_sym_db.RegisterMessage(Arg)

Keyword = _reflection.GeneratedProtocolMessageType('Keyword', (_message.Message,), {
  'DESCRIPTOR' : _KEYWORD,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Keyword)
  })
_sym_db.RegisterMessage(Keyword)

Alias = _reflection.GeneratedProtocolMessageType('Alias', (_message.Message,), {
  'DESCRIPTOR' : _ALIAS,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Alias)
  })
_sym_db.RegisterMessage(Alias)

Withitem = _reflection.GeneratedProtocolMessageType('Withitem', (_message.Message,), {
  'DESCRIPTOR' : _WITHITEM,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.Withitem)
  })
_sym_db.RegisterMessage(Withitem)

MatchCase = _reflection.GeneratedProtocolMessageType('MatchCase', (_message.Message,), {
  'DESCRIPTOR' : _MATCHCASE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchCase)
  })
_sym_db.RegisterMessage(MatchCase)

AbstractPattern = _reflection.GeneratedProtocolMessageType('AbstractPattern', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTPATTERN,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractPattern)
  })
_sym_db.RegisterMessage(AbstractPattern)

MatchValue = _reflection.GeneratedProtocolMessageType('MatchValue', (_message.Message,), {
  'DESCRIPTOR' : _MATCHVALUE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchValue)
  })
_sym_db.RegisterMessage(MatchValue)

MatchSingleton = _reflection.GeneratedProtocolMessageType('MatchSingleton', (_message.Message,), {
  'DESCRIPTOR' : _MATCHSINGLETON,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchSingleton)
  })
_sym_db.RegisterMessage(MatchSingleton)

MatchSequence = _reflection.GeneratedProtocolMessageType('MatchSequence', (_message.Message,), {
  'DESCRIPTOR' : _MATCHSEQUENCE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchSequence)
  })
_sym_db.RegisterMessage(MatchSequence)

MatchMapping = _reflection.GeneratedProtocolMessageType('MatchMapping', (_message.Message,), {
  'DESCRIPTOR' : _MATCHMAPPING,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchMapping)
  })
_sym_db.RegisterMessage(MatchMapping)

MatchClass = _reflection.GeneratedProtocolMessageType('MatchClass', (_message.Message,), {
  'DESCRIPTOR' : _MATCHCLASS,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchClass)
  })
_sym_db.RegisterMessage(MatchClass)

MatchStar = _reflection.GeneratedProtocolMessageType('MatchStar', (_message.Message,), {
  'DESCRIPTOR' : _MATCHSTAR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchStar)
  })
_sym_db.RegisterMessage(MatchStar)

MatchAs = _reflection.GeneratedProtocolMessageType('MatchAs', (_message.Message,), {
  'DESCRIPTOR' : _MATCHAS,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchAs)
  })
_sym_db.RegisterMessage(MatchAs)

MatchOr = _reflection.GeneratedProtocolMessageType('MatchOr', (_message.Message,), {
  'DESCRIPTOR' : _MATCHOR,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.MatchOr)
  })
_sym_db.RegisterMessage(MatchOr)

AbstractTypeIgnore = _reflection.GeneratedProtocolMessageType('AbstractTypeIgnore', (_message.Message,), {
  'DESCRIPTOR' : _ABSTRACTTYPEIGNORE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.AbstractTypeIgnore)
  })
_sym_db.RegisterMessage(AbstractTypeIgnore)

TypeIgnore = _reflection.GeneratedProtocolMessageType('TypeIgnore', (_message.Message,), {
  'DESCRIPTOR' : _TYPEIGNORE,
  '__module__' : 'python3_10_pb2'
  # @@protoc_insertion_point(class_scope:com.giyeok.tython.proto.TypeIgnore)
  })
_sym_db.RegisterMessage(TypeIgnore)

if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  DESCRIPTOR._serialized_options = b'P\001'
  _ABSTRACTMOD._serialized_start=46
  _ABSTRACTMOD._serialized_end=310
  _MODULE._serialized_start=313
  _MODULE._serialized_end=441
  _INTERACTIVE._serialized_start=443
  _INTERACTIVE._serialized_end=509
  _EXPRESSION._serialized_start=511
  _EXPRESSION._serialized_end=576
  _FUNCTIONTYPE._serialized_start=578
  _FUNCTIONTYPE._serialized_end=705
  _ABSTRACTSTMT._serialized_start=708
  _ABSTRACTSTMT._serialized_end=2106
  _FUNCTIONDEF._serialized_start=2109
  _FUNCTIONDEF._serialized_end=2543
  _ASYNCFUNCTIONDEF._serialized_start=2546
  _ASYNCFUNCTIONDEF._serialized_end=2985
  _CLASSDEF._serialized_start=2988
  _CLASSDEF._serialized_end=3358
  _RETURN._serialized_start=3361
  _RETURN._serialized_end=3562
  _DELETE._serialized_start=3565
  _DELETE._serialized_end=3753
  _ASSIGN._serialized_start=3756
  _ASSIGN._serialized_end=4042
  _AUGASSIGN._serialized_start=4045
  _AUGASSIGN._serialized_end=4344
  _ANNASSIGN._serialized_start=4347
  _ANNASSIGN._serialized_end=4681
  _FOR._serialized_start=4684
  _FOR._serialized_end=5073
  _ASYNCFOR._serialized_start=5076
  _ASYNCFOR._serialized_end=5470
  _WHILE._serialized_start=5473
  _WHILE._serialized_end=5765
  _IF._serialized_start=5768
  _IF._serialized_end=6057
  _WITH._serialized_start=6060
  _WITH._serialized_end=6337
  _ASYNCWITH._serialized_start=6340
  _ASYNCWITH._serialized_end=6622
  _MATCH._serialized_start=6625
  _MATCH._serialized_end=6863
  _RAISE._serialized_start=6866
  _RAISE._serialized_end=7131
  _TRY._serialized_start=7134
  _TRY._serialized_end=7495
  _ASSERT._serialized_start=7498
  _ASSERT._serialized_end=7748
  _IMPORT._serialized_start=7751
  _IMPORT._serialized_end=7930
  _IMPORTFROM._serialized_start=7933
  _IMPORTFROM._serialized_end=8178
  _GLOBAL._serialized_start=8181
  _GLOBAL._serialized_end=8328
  _NONLOCAL._serialized_start=8331
  _NONLOCAL._serialized_end=8480
  _EXPR._serialized_start=8483
  _EXPR._serialized_end=8667
  _PASS._serialized_start=8670
  _PASS._serialized_end=8800
  _BREAK._serialized_start=8803
  _BREAK._serialized_end=8934
  _CONTINUE._serialized_start=8937
  _CONTINUE._serialized_end=9071
  _ABSTRACTEXPR._serialized_start=9074
  _ABSTRACTEXPR._serialized_end=10556
  _BOOLOP._serialized_start=10559
  _BOOLOP._serialized_end=10799
  _NAMEDEXPR._serialized_start=10802
  _NAMEDEXPR._serialized_end=11046
  _BINOP._serialized_start=11049
  _BINOP._serialized_end=11342
  _UNARYOP._serialized_start=11345
  _UNARYOP._serialized_end=11588
  _LAMBDA._serialized_start=11591
  _LAMBDA._serialized_end=11826
  _IFEXP._serialized_start=11829
  _IFEXP._serialized_end=12121
  _DICT._serialized_start=12124
  _DICT._serialized_end=12362
  _SETEXPR._serialized_start=12365
  _SETEXPR._serialized_end=12551
  _LISTCOMP._serialized_start=12554
  _LISTCOMP._serialized_end=12800
  _SETCOMP._serialized_start=12803
  _SETCOMP._serialized_end=13048
  _DICTCOMP._serialized_start=13051
  _DICTCOMP._serialized_end=13351
  _GENERATOREXP._serialized_start=13354
  _GENERATOREXP._serialized_end=13604
  _AWAIT._serialized_start=13607
  _AWAIT._serialized_end=13792
  _YIELD._serialized_start=13795
  _YIELD._serialized_end=13995
  _YIELDFROM._serialized_start=13998
  _YIELDFROM._serialized_end=14187
  _COMPARE._serialized_start=14190
  _COMPARE._serialized_end=14489
  _CALL._serialized_start=14492
  _CALL._serialized_end=14780
  _FORMATTEDVALUE._serialized_start=14783
  _FORMATTEDVALUE._serialized_end=15078
  _JOINEDSTR._serialized_start=15081
  _JOINEDSTR._serialized_end=15271
  _CONSTANT._serialized_start=15274
  _CONSTANT._serialized_end=15451
  _ATTRIBUTE._serialized_start=15454
  _ATTRIBUTE._serialized_end=15716
  _SUBSCRIPT._serialized_start=15719
  _SUBSCRIPT._serialized_end=16021
  _STARRED._serialized_start=16024
  _STARRED._serialized_end=16270
  _NAME._serialized_start=16273
  _NAME._serialized_end=16474
  _LISTEXPR._serialized_start=16477
  _LISTEXPR._serialized_end=16723
  _TUPLE._serialized_start=16726
  _TUPLE._serialized_end=16969
  _SLICE._serialized_start=16972
  _SLICE._serialized_end=17308
  _ABSTRACTEXPRCONTEXT._serialized_start=17311
  _ABSTRACTEXPRCONTEXT._serialized_end=17498
  _LOAD._serialized_start=17500
  _LOAD._serialized_end=17506
  _STORE._serialized_start=17508
  _STORE._serialized_end=17515
  _DEL._serialized_start=17517
  _DEL._serialized_end=17522
  _ABSTRACTBOOLOP._serialized_start=17524
  _ABSTRACTBOOLOP._serialized_end=17647
  _AND._serialized_start=17649
  _AND._serialized_end=17654
  _OR._serialized_start=17656
  _OR._serialized_end=17660
  _ABSTRACTOPERATOR._serialized_start=17663
  _ABSTRACTOPERATOR._serialized_end=18342
  _ADD._serialized_start=18344
  _ADD._serialized_end=18349
  _SUB._serialized_start=18351
  _SUB._serialized_end=18356
  _MULT._serialized_start=18358
  _MULT._serialized_end=18364
  _MATMULT._serialized_start=18366
  _MATMULT._serialized_end=18375
  _DIV._serialized_start=18377
  _DIV._serialized_end=18382
  _MOD._serialized_start=18384
  _MOD._serialized_end=18389
  _POW._serialized_start=18391
  _POW._serialized_end=18396
  _LSHIFT._serialized_start=18398
  _LSHIFT._serialized_end=18406
  _RSHIFT._serialized_start=18408
  _RSHIFT._serialized_end=18416
  _BITOR._serialized_start=18418
  _BITOR._serialized_end=18425
  _BITXOR._serialized_start=18427
  _BITXOR._serialized_end=18435
  _BITAND._serialized_start=18437
  _BITAND._serialized_end=18445
  _FLOORDIV._serialized_start=18447
  _FLOORDIV._serialized_end=18457
  _ABSTRACTUNARYOP._serialized_start=18460
  _ABSTRACTUNARYOP._serialized_end=18689
  _INVERT._serialized_start=18691
  _INVERT._serialized_end=18699
  _NOT._serialized_start=18701
  _NOT._serialized_end=18706
  _UADD._serialized_start=18708
  _UADD._serialized_end=18714
  _USUB._serialized_start=18716
  _USUB._serialized_end=18722
  _ABSTRACTCMPOP._serialized_start=18725
  _ABSTRACTCMPOP._serialized_end=19215
  _EQ._serialized_start=19217
  _EQ._serialized_end=19221
  _NOTEQ._serialized_start=19223
  _NOTEQ._serialized_end=19230
  _LT._serialized_start=19232
  _LT._serialized_end=19236
  _LTE._serialized_start=19238
  _LTE._serialized_end=19243
  _GT._serialized_start=19245
  _GT._serialized_end=19249
  _GTE._serialized_start=19251
  _GTE._serialized_end=19256
  _IS._serialized_start=19258
  _IS._serialized_end=19262
  _ISNOT._serialized_start=19264
  _ISNOT._serialized_end=19271
  _IN._serialized_start=19273
  _IN._serialized_end=19277
  _NOTIN._serialized_start=19279
  _NOTIN._serialized_end=19286
  _COMPREHENSION._serialized_start=19289
  _COMPREHENSION._serialized_end=19482
  _ABSTRACTEXCEPTHANDLER._serialized_start=19484
  _ABSTRACTEXCEPTHANDLER._serialized_end=19599
  _EXCEPTHANDLER._serialized_start=19602
  _EXCEPTHANDLER._serialized_end=19889
  _ARGUMENTS._serialized_start=19892
  _ARGUMENTS._serialized_end=20287
  _ARG._serialized_start=20290
  _ARG._serialized_end=20555
  _KEYWORD._serialized_start=20558
  _KEYWORD._serialized_end=20771
  _ALIAS._serialized_start=20774
  _ALIAS._serialized_end=20951
  _WITHITEM._serialized_start=20954
  _WITHITEM._serialized_end=21110
  _MATCHCASE._serialized_start=21113
  _MATCHCASE._serialized_end=21305
  _ABSTRACTPATTERN._serialized_start=21308
  _ABSTRACTPATTERN._serialized_end=21829
  _MATCHVALUE._serialized_start=21832
  _MATCHVALUE._serialized_end=21978
  _MATCHSINGLETON._serialized_start=21980
  _MATCHSINGLETON._serialized_end=22091
  _MATCHSEQUENCE._serialized_start=22094
  _MATCHSEQUENCE._serialized_end=22249
  _MATCHMAPPING._serialized_start=22252
  _MATCHMAPPING._serialized_end=22487
  _MATCHCLASS._serialized_start=22490
  _MATCHCLASS._serialized_end=22777
  _MATCHSTAR._serialized_start=22779
  _MATCHSTAR._serialized_end=22898
  _MATCHAS._serialized_start=22901
  _MATCHAS._serialized_end=23094
  _MATCHOR._serialized_start=23097
  _MATCHOR._serialized_end=23246
  _ABSTRACTTYPEIGNORE._serialized_start=23248
  _ABSTRACTTYPEIGNORE._serialized_end=23352
  _TYPEIGNORE._serialized_start=23354
  _TYPEIGNORE._serialized_end=23395
# @@protoc_insertion_point(module_scope)
